/* CSS Animation for the heading-primary */
/* this is for .heading-primary-main which needs to move in from left when page is loaded or reloaded */
@keyframes moveInLeft {
  /* before the animation start. Can be called anything, here we call as 0% */
  /* start */
  0% {
    opacity: 0;
    /* at the beginning it should be invisible */
    /* at the beginning it should be more in the left so translate -100px */
    transform: translateX(-10rem); }
  /* in between. can have more steps to it*/
  80% {
    transform: translateX(1rem); }
  /* finish */
  100% {
    opacity: 1;
    /* at the end it should be exactly in the the center and should not translate */
    transform: translate(0); } }

/* this is for .heading-primary-sub which needs to move in from right when page is loaded or reloaded */
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* this is for .btn-white which appears from bottom on the header when page loads or reloads*/
@keyframes moveInBottom {
  /* for 0% to be applied before animation starts (when having delay mentioned in animation), use animation-fill-mode like below; */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* this is the first thing you do. Each and every element in css will apply this. This removes default margins and paddings on any element like h1 or p */
/* its better to apply ::after and ::before pseudo elements on * (all) and set them as well to defaults to avoid any strange behavior */
*,
*::after,
*::before {
  margin: 0px;
  padding: 0;
  /* inheriting from body. It means, all elements ( all elemetns because we are defining inside *) will inherit border-box */
  box-sizing: inherit; }

/* font-size (rem and px) guide lines below */
/* We're going to convert all absolute px units to relative rem units. rem is relative to the base/root font size mentioned in html (we can also mention in body, but lets do in html below) */
/* Note that the base font size by browser is 16px, but lets keep it for 10px now and design everything according to this because it will be easy for our calculations. 10px = 1rem */
/* Finally we should change 10px to % which is 10px/16px (62.5%) because % will be relative to the browser's font-size which makes user to change it (by zooming-in or out) easily. If we set it to 10px then user cannot change it which is bad */
html {
  /* root font-size . This defines what 1rem is - which is 10px */
  /* it should be in % rather than px so that user can change it in the browser when zooms in or out. Default is 16px but we need a % equal to 10px which is 10/16 which is 62.5% */
  font-size: 62.5%; }

body {
  /* instead of writing this border-box setting in *, you should use here so that you can use inherit in * for all elements to inherit from body */
  box-sizing: border-box; }

/* Heading */
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* to make the animation work without shaking. Why this works is not clearly known at this point of time */
  /* make sure you use this when you use animations */
  backface-visibility: hidden;
  /* margin for button btn */
  margin-bottom: 6rem;
  /* We want the span element to take up entire block. By default span is an inline element. We make it block here coz we 
  want main and sub to be on different lines */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    /*by default h1 has higher font-weight;*/
    letter-spacing: 3.5rem;
    /* applying css animation - making use of defined keyframe for fading in from left*/
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* this long animation should take*/
    /* animation-timing-function specifies how the animation effect should be with in the animation-duration time 1 second*/
    /* https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function */
    animation-timing-function: ease-out;
    /* Additional animation properties */
    /* 
      animation-left: 3s   - Animation will start after 3seconds
      animation-iteration-count: 3;  - Animation will happen for 3 times
      
      */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.64rem;
    /* You can specify all animation properties like name, duration like we have done in heading-primary-main into animation like below */
    animation: moveInRight 1s ease-out; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  display: inline-block;
  -webkit-background-clip: text;
  color: transparent;
  background-clip: 0;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

/* button */
.btn {
  /* we are using a - anchor tag for button link  */
  /* a - has 4 states - link, visited, active and hover */
  /* link - normal state of a */
  /* visited - once user visites it, you might have noticed it becomes violet color from blue after clicking the link */
  /* active - currently clicked link state */
  /* using pseudo selectors we can define these states as shown */
  /* for fading out on hover functionality, we use pseudo element ::after */
  /* checkout my codepen https://codepen.io/sandeep194920-the-flexboxer/pen/MWjEpXp */
  /* Also, https://codepen.io/sandeep194920-the-flexboxer/pen/jOMGmQx */
  /* Note, we need this after content to be exactly like our btn and sits behind it. We scale it to be bigger than btn in animation */
  /* when we hover the btn, we need the ::after content to take effect */
  /* Since we will have many btns later we will need this animation only to this btn now */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* this btn is an anchor tag and by default works as an inline element hence the styling will be off. So we need it as inline block */
    display: inline-block;
    border-radius: 10rem;
    /* will remain same for higher numbers too . will stop after 40px*/
    font-size: 1.6rem;
    /* there are 2 types of using animation. One is by using keyframes like we did before and second one is by using transition prop */
    /* all here specifies - all effects like on hover transform and active transform should all apply here */
    /* there might be a confusion about why this must be in link/visited state, but that's how it should be */
    /* we define transition here and related transofrm will be specified as below in hover and active states */
    transition: all 0.2s;
    /* position is set to relative because  btn::after is set to absolute for btn::after to appear behind the btn*/
    position: relative; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* box-shadow: x-direction y-direction amount-of-blurness color-&-opacity ; */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777;
    /* this animation should apply to only btn-white hence we define it below */ }
    .btn--white::after {
      background-color: white; }
  .btn::after {
    content: "";
    /*mandatory field in ::after*/
    display: inline-block;
    /* we want it to be exactly same as our btn display*/
    /* width and height will be same as the btn (100% of btn is the btn width and height itself */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* this should also be same as btn so it exactly sits behind the btn*/
    /* till this point, this btn::after looks as the part of btn itself but we want it to be behind this btn so position should be absolute */
    position: absolute;
    top: 0;
    left: 0;
    /* This should not appear in front because it hides the title of btn so we set negetive z-index  */
    z-index: -1;
    /* tranition - using it for transform to take effect which is written in hover::after state below */
    transition: all 0.4s ease-out; }
  .btn:hover::after {
    /* we want the element to grow bigger */
    transform: scaleX(1.4) scaleY(1.6);
    /* At this point we want the transform to work with ease-out property smoothly in one second, so we give translate property for it's parent in btn and link this transform there */
    opacity: 0; }
  .btn--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* fill-mode automatically puts the 0% animation in the beginning before the delay (0.75s). Without this the button appears for 0.75s and then animation happens which deosnt look good */
    /* Always remember you might want to use fill-mode when using delay for this reason */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 0.1rem solid #55c57a;
  padding: 0.3rem; }

.header {
  height: 95vh;
  /* we have a bg image. We need to set green color on top of it, so we specify a gradiant. Gradiant will come first coz it should stay on top of bg image */
  /* linear gradiant is having multiple colors and to right indicate from left (dark green to right light green). We can also give to top OR to bottom OR to right bottom and so on */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* fits completely*/
  background-position: top;
  /* always fixed to top. Top never changes when u reduce window size. Can be done for bottom/center as well. Play with it and see*/
  /* clip-path is to trim the image where we need. polygon takes 4 points left, right, right bottom and left bottom. 
    0 0 -> first 0 is from left side of webpage and second 0 is from top of webpage
    so, we say at 0 0 my point should be located
    similarly, 100% 0 -> from left side of webpage my second point should be placed 100% and 0% from top 
    and so on.
    
    For detailed explanation view - https://www.youtube.com/watch?v=fn88PkKo9gQ&ab_channel=WinstonCodes
    You can calculate this using - https://bennettfeely.com/clippy/
  Note: Triangle takes only 3 points and we can do this way - polygon(50% 0, 100% 100%, 0 100%)
    */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* setting this element to relative because this is parent element to logo-box and text-box which are the child and absolutely positioned */
  position: relative;
  /* Text-box */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* If we specify height then the widht will automatically set by browser and we dont need to set that. If we set width then our width will take the priority and appears on the page */
    /* The same applies of width. If we set width, then height will be set automatically by browser */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* The text-box's center needs to be top-40 and left-50 and not the text-box's start. This can be done by adding transform translate */
    /* translate moves the text-box itself as defined inside translate */
    transform: translate(-50%, -50%);
    /* X = -50% and Y=-50%, so that it's center will be aligned properly  */
    /* this is used so that the .btn (anchor tag) which is inline element centers itself in this block */
    text-align: center;
    /* margin:auto vs text-align: center;; */
    /* margin is used on container to center it while text-align is used on inline and inline-block elemnts to align them */ }

/* Logo */
.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 *6rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 *6rem) / 4); }
  .row .col-2-of-3 {
    width: calc( (2 * (100% - 2 *6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 *6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( (3 * ((100% - 3 *6rem) / 4)) + 2 *6rem); }
  .row::after {
    content: "";
    display: table;
    clear: both; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
