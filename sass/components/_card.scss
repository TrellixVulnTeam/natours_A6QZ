.card {
  // perspective needs to be on parent (see expln below)
  perspective: 150rem;
  -moz-perspective: 150rem; // mozilla firefox will recognize the perspective with this

  // front-side and back-side of the card needs to be on top of one another, so we need this card container relatively positioned
  position: relative;

  // the position:absolute makes the parent (card) lose its height and the perspective on it no longer works. We can not apply clear-fix because it's not float problem. so the fix is we need to specify the same height to the parent as the sides
  height: 50rem;

  &__side {
    background-color: orangered;
    height: 50rem;
    // giving transition for transform to work smoothly. In this case, without transition, you would not see hover transform rotation because it will be so fast
    transition: all 0.8s ease; // by default the timing function is linear, we'll change it to ease
    // testing color and font
    color: #fff;
    font-size: 2rem;

    // front-side and back-side of the card needs to be on top of one another, so we need to postion it absolutely
    position: absolute; // this makes the parent (card) lose its height and the perspective on it no longer works. We can not apply clear-fix because it's not float problem. so the fix is we need to specify the same height to the parent as this sides
    top: 0;
    left: 0;
    // this fixes the width which scatters in absolute positioning
    width: 100%;

    // we need back-face-visibility hidden so that it hides the back part when rotated.
    backface-visibility: hidden;

    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      background-color: white;
    }

    &--back {
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }
    }
  }

  // now when card is hovered, it should be rotated half of a circle which is 180deg in y direction. Imagine keeping your finger in the top-middle(y axis) of the card and then rotate in anti-clockwise direction.
  // hover should be like .card:hover .card__side{transform: rotateY(180deg);}, meaning when card is hovered, it's side should rotate. We could directly apply hover on child, but later we might have multiple sides
  &:hover &__side--front {
    transform: rotateY(180deg);
  }

  // back side is aleady initially at 180deg so it should go back to 0 on hover
  &:hover &__side--back {
    transform: rotateY(0);
  }
}
// WHAT IS PERSPECTIVE?
// to get a proper 3d effect of rotation, and to feel realistic 3d effect, we need to have perspective defined on the parent
// perspective should be a large number and it really is not clear how it behaves in every situation, so we need to trial and error with the perspective number
// perspective should be applied on parent. Now, Card has 2 sides, so we need to make front side of the card as a child to the card and back side as another div(another child)
//  Card (PARENT)
//     / \
//    /   \
//  front  back   sides of card(children)
