.card {
  // perspective needs to be on parent (see expln below)
  perspective: 150rem;
  -moz-perspective: 150rem; // mozilla firefox will recognize the perspective with this

  // front-side and back-side of the card needs to be on top of one another, so we need this card container relatively positioned
  position: relative;

  // the position:absolute makes the parent (card) lose its height and the perspective on it no longer works. We can not apply clear-fix because it's not float problem. so the fix is we need to specify the same height to the parent as the sides
  height: $card-height;

  &__side {
    height: $card-height;
    // giving transition for transform to work smoothly. In this case, without transition, you would not see hover transform rotation because it will be so fast
    transition: all 0.8s ease; // by default the timing function is linear, we'll change it to ease

    // front-side and back-side of the card needs to be on top of one another, so we need to postion it absolutely
    position: absolute; // this makes the parent (card) lose its height and the perspective on it no longer works. We can not apply clear-fix because it's not float problem. so the fix is we need to specify the same height to the parent as this sides
    top: 0;
    left: 0;
    // this fixes the width which scatters in absolute positioning
    width: 100%;

    // we need back-face-visibility hidden so that it hides the back part when rotated.

    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;

    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      background-color: white;
    }

    &--back {
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }
      &-2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }
      &-3 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
    }
  }

  // now when card is hovered, it should be rotated half of a circle which is 180deg in y direction. Imagine keeping your finger in the top-middle(y axis) of the card and then rotate in anti-clockwise direction.
  // hover should be like .card:hover .card__side{transform: rotateY(180deg);}, meaning when card is hovered, it's side should rotate. We could directly apply hover on child, but later we might have multiple sides
  &:hover &__side--front {
    transform: rotateY(-180deg);
  }

  // back side is aleady initially at 180deg so it should go back to 0 on hover
  &:hover &__side--back {
    transform: rotateY(0);
  }

  // Front side
  // .card__picture
  &__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen; // blends the image with an effect. try it out in the browser. blend-mode color also is good
    -webkit-clip-path: polygon(
      0 0,
      100% 0,
      100% 85%,
      0 100%
    ); //webkit means, vendor implemented. to work in all browsers. put this first and then normal clip-path
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    // setting border radius on image so that the overflow of images wont be shown
    border-top-left-radius: 0.3rem;
    border-top-right-radius: 0.3rem;
    &--1 {
      // note that I should actually move two levels up for img -> ../../img but I am moving only one level because this is what css file gets. Two levels also works on a side note.
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        url(../img/nat-5.jpg);
    }
    &--2 {
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url(../img/nat-6.jpg);
    }
    &--3 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url(../img/nat-7.jpg);
    }
  }

  //.card__heading
  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: $color-white;
    // since it should be on the bottom right of the image, lets make it absolute
    position: absolute;
    top: 12rem;
    right: 3rem;
    text-align: right;
    // should divide into two blocks so lets reduce the width
    width: 75%;
  }
  //   we could have nested this at the top, but lets consider this as a new block element in bem so that we can use this text design anywhere else later
  &__heading-span {
    padding: 1rem 1.5rem;
    // box-decoration-break is used for the text which is one liner (manually splitted into two by padding) to be treated the same. I mean the above text in line one bg will be treated the same for the below as well with same padding and stuff so that we get a feel of the text being in two separate lines
    // without webkit, even it's not supported in chrome currently
    // in this case box=decoration-break:clone means, padding is applied to both (cloning)
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    &-1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 1),
        rgba($color-secondary-dark, 1)
      );
    }

    &-2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 1),
        rgba($color-primary-dark, 1)
      );
    }

    &-3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 1),
        rgba($color-tertiary-dark, 1)
      );
    }
  }

  // card__details
  &__details {
    padding: 3rem;
    ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;
      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;
        &:not(:last-child) {
          border-bottom: 0.1rem solid $color-grey-light-2;
        }
      }
    }
  }

  // card__cta
  &__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    // width is given so that the button name will not shrink to the next line
    width: 90%;
    text-align: center;
  }

  &__price-box {
    text-align: center;
    margin-bottom: 8rem;
    color: $color-white;
  }
  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }

  // MEDIA-QUERY - there is no rotation on hover in small devices as we don't hover. And it's not practical to touch the card and have it rotated.
  // So we can just extend the bottom of the card to have the btn there.
  // So this is a whole re-write of the entire card

  @include respond(tab-port) {
    height: auto;
    border-radius: 3px;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);
    &__side {
      height: auto;
      position: relative;
      box-shadow: none;

      &--back {
        transform: rotateY(0);
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
      }
    }

    &:hover &__side--front {
      transform: rotateY(0);
    }

    &:hover &__side--back {
      transform: rotateY(0);
    }

    &__details {
      padding: 1rem 3rem;
    }
    // Front side styling
    // card__cta
    &__cta {
      position: relative;
      top: 0%;
      left: 0%;
      transform: translate(0);
      width: 100%;
      padding: 7rem 4rem 4rem;
    }

    &__price-box {
      margin-bottom: 3rem;
    }

    &__price-value {
      font-size: 4rem;
    }
  }
}
// WHAT IS PERSPECTIVE?
// to get a proper 3d effect of rotation, and to feel realistic 3d effect, we need to have perspective defined on the parent
// perspective should be a large number and it really is not clear how it behaves in every situation, so we need to trial and error with the perspective number
// perspective should be applied on parent. Now, Card has 2 sides, so we need to make front side of the card as a child to the card and back side as another div(another child)
//  Card (PARENT)
//     / \
//    /   \
//  front  back   sides of card(children)
