.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }
  &__input {
    font-size: 1.5rem;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;
    // inside the input elements we don't have lato font by default
    // all elements inherit font-family by default but input elements don't so we need to specify manually
    font-family: inherit;
    color: inherit;
    border-bottom: 0.3rem solid transparent; // initially will be invisible and when clicked, it will show green color (focus)
    width: 90%;
    display: block;
    transition: all 0.6s;

    // when we click on input the border becomes blue, we can remove that by focus attribute
    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 0.3rem solid $color-primary;
    }
    // to design placeholder (pseudo element). webkit is necessary and it currently works only on safari and chrome
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }

    // validation comes in the browsers. In html, we mark required so that takes care of the check. We can design that using following. We want this to happen when the field is actually focused
    &:focus:invalid {
      border-bottom: 0.3rem solid $color-secondary-dark;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: bold;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
    transform: translateY(0);
  }
  // the meaning of &__input:placeholder-shown &__label   is form__input:placeholder-shown form__label.
  // form__input and form__label are siblings and not the children so we need a sibling selector as shown
  // + is the adjacent sibling selector. It selects the immediate (very next) sibling. form_input's very next element is form_label, so + works in this case
  //   If there were other elements (other siblings) in between form__input and form__label then instead of + we can use ~
  &__input:placeholder-shown + &__label {
    // initial state (when nothing is written in input and placeholder is visible)
    //  this means that-> when placeholder is shown (when we have not yet written anything in input), label must be translated below
    opacity: 0;
    visibility: hidden; // required opacity 0 as well with visibility:hidden to animate this
    // it has to be at the top in initial state
    transform: translateY(-2rem);
  }

  &__radio-group {
    // we could have used floats also to make labels side by side instead of giving a width and display inline-block. But this is also a good approach
    width: 49%;
    display: inline-block;
  }
  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative; // radio-btn (span is absolutely positioned for correct placement, so making this relative
    // giving some padding so text will move to right
    padding-left: 4.5rem;
  }
  // our defined radio-buttons (span tags which will be turned into custom radio btns)
  &__radio-button {
    // since it is a circle we give same height and width
    height: 3rem;
    width: 3rem;
    border: 0.5rem solid $color-primary;
    border-radius: 50%;
    // changing the default display of span from inline to inline-block element.
    // By default, span is an inline element so it doesnt work as the all of the above props wont apply to inline, so we make it either a block or inline-block. inline-block in this case
    display: inline-block;

    // lets position it properly
    position: absolute;
    left: 0rem;
    top: -0.6rem;
    // the green dot (selector) inside the custom radio btn can be designed using ::after pseudo class
    &::after {
    }
  }
}
