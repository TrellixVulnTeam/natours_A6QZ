.row {
  // max-width vs width - width forces it to stay the mentioned size while max-width allows it to shrink if necessary based on viewport width;
  // min-width: is the width it cannot not be smaller than the specified number. It introduces horizontal scroll;
  //   width: 295rem;
  max-width: $grid-width;

  @include respond(tab-port) {
    max-width: 50rem;
  }

  // background-color: #eee;
  margin: 0 auto;
  //   margin-bottom: $gutter-vertical; // we can include this here if we are not using  &:not(:last-child)

  //   we dont need the vertical gutter for the last child so we do this. Alternate way of doing this is uncommented below
  //   &:last-child {
  //     margin-bottom: 0;
  //   }
  //   this means, everything except the last child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  // this means to say -> select all the elements having the class starting with col-.  If we write class* then select any classes that CONTAIN col-. $ means END with col-
  [class^="col-"] {
    // background-color: orangered;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      // down below, we are converting column to have 100% width, so one column is treated as a row and we dont need any gutter in this case since we dont have elements next to it and hence we dont need gutter spacing
      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }
    float: left; // first one will float left and then next will follow it. no need any right float here

    // media-query. It's generally a best practice to set the width of all the columnsto 100%, so it displays one single block.
    // this is what is usually done on mobile devices
    // all columns transforms in to rows, so the entire webpage will have one single column
    @include respond(tab-port) {
      width: 100% !important; // making sure that none of the column styles will overrride this
    }
  }

  // columns which are inside of .row
  .col-1-of-2 {
    //   we have a grid like this, to get the
    //   --------------- gutter  ---------------
    //   how to get one column here? we have 100% - gutter = 2 columns. So 1 column is (100%-gutter)/2
    //   in sass we can do this calculation for width of one column. Note that in the calc function we need to use # like below when we use variables

    width: calc((100% - #{$gutter-horizontal}) / 2);
  }
  .col-1-of-3 {
    width: calc((100% - 2 *#{$gutter-horizontal}) / 3);
  }

  .col-1-of-4 {
    width: calc((100% - 3 *#{$gutter-horizontal}) / 4);
  }

  .col-2-of-3 {
    width: calc(
      (2 * (100% - 2 *#{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
    );
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - 3 *#{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      (3 * ((100% - 3 *#{$gutter-horizontal}) / 4)) + 2 *#{$gutter-horizontal}
    );
  }
  @include clearfix;
}
// clearfix is included in mixin like this
// row::after{}
