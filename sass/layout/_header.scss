// contains header because many pages can use this single header

.header {
  height: 95vh;
  /* we have a bg image. We need to set green color on top of it, so we specify a gradiant. Gradiant will come first coz it should stay on top of bg image */
  /* linear gradiant is having multiple colors and to right indicate from left (dark green to right light green). We can also give to top OR to bottom OR to right bottom and so on */
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      /* note that the hex color inside rgba works only for sass/scss and not for normal css*/
        rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero-small.jpg); // this is small image for lower resolution screen. We are writing mq written below for higher res screen
  background-size: cover; /* fits completely*/
  background-position: top; /* always fixed to top. Top never changes when u reduce window size. Can be done for bottom/center as well. Play with it and see*/

  /* clip-path is to trim the image where we need. polygon takes 4 points left, right, right bottom and left bottom. 
    0 0 -> first 0 is from left side of webpage and second 0 is from top of webpage
    so, we say at 0 0 my point should be located
    similarly, 100% 0 -> from left side of webpage my second point should be placed 100% and 0% from top 
    and so on.
    
    For detailed explanation view - https://www.youtube.com/watch?v=fn88PkKo9gQ&ab_channel=WinstonCodes
    You can calculate this using - https://bennettfeely.com/clippy/
  Note: Triangle takes only 3 points and we can do this way - polygon(50% 0, 100% 100%, 0 100%)
    */
  -webkit-clip-path: polygon(
    0 0,
    100% 0,
    100% 75vh,
    0 100%
  ); // vendor implemented, to work across all the browsers. put this line first and then normal clip-path
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  /*RESPONSIVE IMAGES IN CSS*/
  /* Note : hero bg is 600px while hero-small bg is 200px*/
  // The mq for image is to load different images for different situations.
  // Up until now, we wrote mq only with respect to view port width but there are other type of mqs. One of them is to target device resolution.

  // 192 dots per inch is the apple's retina screen resolution and it is a reference generally.
  // this doesn't work on safari so we need -webkit-min-device-pixel-ratio. This means here that the device's pixel ratio should be atleast 2x which is actually same as the 192dpi one.
  @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
    only screen and (min-width: 125em),
    only screen and (-webkit-min-device-pixel-ratio: 2) {
    // this says, whenever the resoltuion is higher than 192dpi AND min-width<=600px then apply this media-query. For a phone, we would generally have not more than 2x screen, so 600 physical px will be phone's width * 2 = 1200px max should be enough, so we apply this max-width mq here along with screen resolution
    // And here we want the high res hero bg image
    background-image: linear-gradient(
        to right bottom,
        /* changing the below colors from primary to secondary for testing purpose so we know which images are loaded when screen res is changed*/
          rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)
      ),
      url(../img/hero.jpg);
  }
  // If width is larger than 2000px then we also need high res image, hero
  // @media (min-width: 2000px) {
  //   // this says, whenever the resoltuion is higher than 192dpi AND min-width<=600px then apply this media-query. For a phone, we would generally have not more than 2x screen, so 600 physical px will be phone's width * 2 = 1200px max should be enough, so we apply this max-width mq here along with screen resolution
  //   // And here we want the high res hero bg image
  //   background-image: linear-gradient(
  //       to right bottom,
  //       /* changing the below colors from primary to secondary for testing purpose so we know which images are loaded when screen res is changed*/
  //         rgba($color-secondary-light, 0.8),
  //       rgba($color-secondary-dark, 0.8)
  //     ),
  //     url(../img/hero.jpg);
  // }

  // for small devices, the steep is too much, so reducing the clip-path
  @include respond(phone) {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  }

  /* setting this element to relative because this is parent element to logo-box and text-box which are the child and absolutely positioned */
  position: relative;

  // replacing .header with & because, & means header up unitl this point
  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    /* If we specify height then the widht will automatically set by browser and we dont need to set that. If we set width then our width will take the priority and appears on the page */
    /* The same applies of width. If we set width, then height will be set automatically by browser */
    height: 3.5rem;
  }

  /* Text-box */
  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* The text-box's center needs to be top-40 and left-50 and not the text-box's start. This can be done by adding transform translate */
    /* translate moves the text-box itself as defined inside translate */
    transform: translate(-50%, -50%);
    /* X = -50% and Y=-50%, so that it's center will be aligned properly  */

    /* this is used so that the .btn (anchor tag) which is inline element centers itself in this block */
    text-align: center;

    /* margin:auto vs text-align: center;; */
    /* margin is used on container to center it while text-align is used on inline and inline-block elemnts to align them */
  }
}

/* Logo */
// We can write in sassy way above. Let's comment this here
// .header__logo-box {
//   position: absolute;
//   top: 4rem;
//   left: 4rem;
// }
